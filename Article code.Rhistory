dev.off()
ROC3 <- timeROC(T=surv_phe$OS.time,   #结局时间
delta=surv_phe$OS,   #结局指标
marker=pre,   #预测变量
cause=1,   #阳性结局指标数值
weighting="marginal",   #计算方法，默认为marginal
times=c(1, 3, 5),   #时间点，选取1年，3年和5年的生存率
iid=TRUE)
results<-formula_rd(nomogram=nom2)
##生成每个个体分数
surv_phe$points<-points_cal(formula = results$formula,rd=surv_phe)
pre<-surv_phe$points
View(surv_phe)
cali <- calibrate(f,
cmethod = 'KM',   # 表示使用Kaplan-Meier（KM）估计方法进行校准
method = "boot",  # 表示使用自助法（Bootstrap）进行校准，Bootstrap 是一种统计方法，它通过从原始数据中有放回地进行重采样来估计参数的不确定性和分布。在这里，Bootstrap 用于生成多个随机样本来估计校准曲线的分布，以便获得更可靠的校准结果。
u = 1,          # 设置时间间隔，需要与之前模型中定义的time.inc一致
m = 46,           # 每次抽样的样本量，根据样本量来确定，标准曲线一般将所有样本分为3组（在图中显示3个点）
B = 1000)
par(mar = c(6, 6, 3, 3))
plot(cali,                          # 绘制校准曲线的数据
lwd=1,                         # 线条宽度为1
lty=1,                         # 线条类型为1（实线）
conf.int=T,                    # 是否显示置信区间
errbar.col="blue3",            # 直线和曲线的误差线颜色设置为蓝色
col="red3",                    # 校准曲线的颜色设置为红色
xlim=c(0,1),                   # x轴的限制范围，从0到1
ylim=c(0,1),                   # y轴的限制范围，从0到1
xlab="Nomogram-Predicted Probability",  # x轴标签
ylab="Actual proportion",                # y轴标签
subtitles = F)
dev.off()
surv_phe <- read.csv(".\\res\\surv_phe_nomo.csv", header = T, row.names = 1)
View(surv_phe)
# surv_phe <- surv_phe[,-7]
surv_phe <- surv_phe[,-c(5,7:9,11,14)]
surv_phe <- na.omit(surv_phe)
surv_phe$OS.time <- surv_phe$OS.time/365
# surv_phe <- surv_phe[which(surv_phe$OS.time < 3),]
ddist <- datadist(surv_phe)
options(datadist='ddist')
f <- cph(Surv(OS.time,OS)~age+stage+T+
+N+riskscore, x=T, y=T, surv=T, data=surv_phe, time.inc=1)
s <- f[[2]]
surv <- Survival(f)
###构建Nomogram
nom2 <- nomogram(f, fun=list(function(x) surv(1, x), function(x) surv(3, x), function(x) surv(5, x)),
lp=F, funlabel=c("1-year survival", "3-year survival", "5-year survival"),
maxscale=100,
fun.at=c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3,0.2,0.1))
plot(nom2)
dev.off()
###nomogram ROC###
library(nomogramFormula)
library(pROC)
results<-formula_rd(nomogram=nom2)
##生成每个个体分数
surv_phe$points<-points_cal(formula = results$formula,rd=surv_phe)
pre<-surv_phe$points
# plot.roc(surv_phe$OS, pre,
#          main="ROC Curve", percent=TRUE,
#          print.auc=TRUE,
#          ci=TRUE, of="thresholds",
#          thresholds="best",
#          print.thres="best")##构建roc曲线
# rocplot1 <- roc(surv_phe$OS,pre)
library(ROCR)   #使用ROCR包绘制预测模型的ROC曲线
library(glmnet)
library(caret)
library(timeROC)
ROC3 <- timeROC(T=surv_phe$OS.time,   #结局时间
delta=surv_phe$OS,   #结局指标
marker=pre,   #预测变量
cause=1,   #阳性结局指标数值
weighting="marginal",   #计算方法，默认为marginal
times=c(1, 3, 5),   #时间点，选取1年，3年和5年的生存率
iid=TRUE)
ROC3   #查看模型变量信息
#绘制ROC曲线
plot(ROC3,
time=1, col="indianred1", lwd=4)   #time是时间点，col是线条颜色
plot(ROC3,
time=3, col="lightseagreen", lwd=4, add=TRUE)   #add指是否添加在上一张图中
plot(ROC3,
time=5, col="dodgerblue2", lwd=4, add=TRUE)
legend("bottomright",
c("Year-1 AUC=0.993", "Year-3 AUC=0.831", "Year-5 AUC=0.829"),
col=c("indianred1", "lightseagreen", "dodgerblue2"),
lty=1, lwd=2)   #添加标签信息
dev.off()
rcorrcens(Surv(OS.time,OS) ~ predict(f), data =  surv_phe)
cali <- calibrate(f,
cmethod = 'KM',   # 表示使用Kaplan-Meier（KM）估计方法进行校准
method = "boot",  # 表示使用自助法（Bootstrap）进行校准，Bootstrap 是一种统计方法，它通过从原始数据中有放回地进行重采样来估计参数的不确定性和分布。在这里，Bootstrap 用于生成多个随机样本来估计校准曲线的分布，以便获得更可靠的校准结果。
u = 1,          # 设置时间间隔，需要与之前模型中定义的time.inc一致
m = 46,           # 每次抽样的样本量，根据样本量来确定，标准曲线一般将所有样本分为3组（在图中显示3个点）
B = 1000)
par(mar = c(6, 6, 3, 3))
plot(cali,                          # 绘制校准曲线的数据
lwd=1,                         # 线条宽度为1
lty=1,                         # 线条类型为1（实线）
conf.int=T,                    # 是否显示置信区间
errbar.col="blue3",            # 直线和曲线的误差线颜色设置为蓝色
col="red3",                    # 校准曲线的颜色设置为红色
xlim=c(0,1),                   # x轴的限制范围，从0到1
ylim=c(0,1),                   # y轴的限制范围，从0到1
xlab="Nomogram-Predicted Probability",  # x轴标签
ylab="Actual proportion",                # y轴标签
subtitles = F)
dev.off()
#决策曲线
#注意修改""及~的字符
dc=decision_curve(Surv(OS.time,OS) ~ riskscore+stage+T+N, data=surv_phe,
family = binomial(link ='logit'),
thresholds= seq(0,1,by = 0.01),
confidence.intervals = 0.95)
?decision_curve
#决策曲线
#注意修改""及~的字符
install.packages("ggDCA")
#决策曲线
#注意修改""及~的字符
library(ggDCA)
#决策曲线
#注意修改""及~的字符
install.packages("ggDCA")
#决策曲线
#注意修改""及~的字符
install.packages("ggDCA")
?ggDCA
??ggDCA
#决策曲线
#注意修改""及~的字符
library(rmda)
install.packages("rmda")
#决策曲线
#注意修改""及~的字符
library(rmda)
dc=decision_curve(Surv(OS.time,OS) ~ riskscore+stage+T+N, data=surv_phe,
family = binomial(link ='logit'),
thresholds= seq(0,1,by = 0.01),
confidence.intervals = 0.95)
surv_phe <- read.csv(".\\res\\surv_phe_nomo.csv", header = T, row.names = 1)
# surv_phe <- surv_phe[,-7]
surv_phe <- surv_phe[,-c(4,5,7:9,11,14)]
surv_phe <- na.omit(surv_phe)
surv_phe$OS.time <- surv_phe$OS.time/365
# surv_phe <- surv_phe[which(surv_phe$OS.time < 3),]
ddist <- datadist(surv_phe)
options(datadist='ddist')
f <- cph(Surv(OS.time,OS)~age+stage+T+
+N+riskscore, x=T, y=T, surv=T, data=surv_phe, time.inc=1)
s <- f[[2]]
surv <- Survival(f)
###构建Nomogram
nom2 <- nomogram(f, fun=list(function(x) surv(1, x), function(x) surv(3, x), function(x) surv(5, x)),
lp=F, funlabel=c("1-year survival", "3-year survival", "5-year survival"),
maxscale=100,
fun.at=c(0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3,0.2,0.1))
plot(nom2)
dev.off()
plot(nom2)
dc=decision_curve(Surv(OS.time,OS) ~ riskscore+stage+T+N, data=surv_phe,
family = binomial(link ='logit'),
thresholds= seq(0,1,by = 0.01),
confidence.intervals = 0.95)
dc=decision_curve(OS ~ riskscore+stage+T+N, data=surv_phe,
family = binomial(link ='logit'),
thresholds= seq(0,1,by = 0.01),
confidence.intervals = 0.95)
plot_decision_curve(dc,
curve.names="six genes",
xlab="Threshold probability",
cost.benefit.axis=T,
col="#561215",
confidence.intervals=FALSE,
standardize=FALSE)
dev.off()
dc=decision_curve(Surv(OS.time,OS) ~ riskscore, data=surv_phe,
family = binomial(link ='logit'),
thresholds= seq(0,1,by = 0.01),
confidence.intervals = 0.95)
surv_phe <- read.csv(".\\res\\surv_phe_nomo.csv", header = T, row.names = 1)
# surv_phe <- surv_phe[,-7]
surv_phe <- surv_phe[,-c(4,5,7:9,11,14)]
surv_phe <- na.omit(surv_phe)
surv_phe$OS.time <- surv_phe$OS.time/365
# surv_phe <- surv_phe[which(surv_phe$OS.time < 3),]
ddist <- datadist(surv_phe)
options(datadist='ddist')
ciber <- read.table("CIBERSORT-Results.txt",sep = "\t",row.names = 1,check.names = F,stringsAsFactors = F,header = T)
View(ciber)
###HLA-immunity map
library(ggsci)
library(tidyr)
library(ggpubr)
data <- read.csv(".\\res\\HLA-Immunity.csv", header = T, row.names = 1)
data <- data %>% rownames_to_column("sample")
library(tidyverse)
library(org.Hs.eg.db)
library(survival)
library(survminer)
library(clusterProfiler)
library(glmnet)
library(ggpubr)
library(org.Hs.eg.db)
library(limma)
library(ggplot2)
library(ggprism)
library(GEOquery)
library(WGCNA)
library(reshape2)
library(stringr)
library(tidyverse)
# datExpr <- datExpr[rownames(estimate), ]
# estimate <- read.csv(".\\res\\estimate_score_imm.csv", header = T, row.names = 1)
sigmarker_ssGSEA <- read.csv(".\\sigmarker_ssGSEA.csv", header = T, row.names = 1)
View(sigmarker_ssGSEA)
####WGCNA分析####
#读入counts数据
counts <- read.csv(".//res//TCGA_counts.csv", header = T, row.names = 1)
cluster <- read.csv(".\\res\\cluster_WGCNA.csv", header = T, row.names = 1)
DEG_Immune <- read.csv(".\\res\\DEG_IAGs.csv", header = T, row.names = 1)
consample <- intersect(rownames(cluster), colnames(counts))
counts <- counts[, consample]
expres <- counts[DEG_Immune$gene_name, ]
#降序
expres <- expres[order(rowSums(expres), decreasing = T), ]
#类型转换
expres[] <- lapply(expres, as.numeric)
#转置
datExpr <- t(expres)
# 获得基因数和样本数
identical(rownames(datExpr), rownames(cluster))
nGenes = ncol(datExpr)
nSamples = nrow(datExpr)
# 用彩色标签重新计算MEs
# 在给定的单个数据集中计算模块的模块本征基因
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
library(WGCNA)
library(reshape2)
library(stringr)
library(tidyverse)
?moduleEigengenes
# 用彩色标签重新计算MEs
# 在给定的单个数据集中计算模块的模块本征基因
MEs0 = moduleEigengenes(datExpr, moduleColors)$eigengenes
clinical <- read.delim("D:/R/公司/NSUN2介导XX基因m5C修饰调控铁死亡进程在肺癌免疫治疗抵抗的机制研究/LUAD/clinical.cart.2024-03-22/clinical.tsv")
View(clinical)
metadata.cart.2024.03.22 <- read.csv2("D:/R/公司/NSUN2介导XX基因m5C修饰调控铁死亡进程在肺癌免疫治疗抵抗的机制研究/LUAD/metadata.cart.2024-03-22.json", sep="")
clinical <- read.delim("D:/R/公司/NSUN2介导XX基因m5C修饰调控铁死亡进程在肺癌免疫治疗抵抗的机制研究/LUSC/clinical.cart.2024-03-22/clinical.tsv")
View(clinical)
NSUN6_LUSC_expr <- read.csv("C:/Users/Jesse/Desktop/NSUN6_LUSC_expr.CSV", header=FALSE)
View(NSUN6_LUSC_expr)
NSUN6_LUSC_expr <- read.csv("C:/Users/Jesse/Desktop/NSUN6_LUSC_expr.CSV")
View(NSUN6_LUSC_expr)
library(tidyverse)
library(ggpubr)
library(ggplot2)
ggboxplot(NSUN6_LUSC_expr, x = "group",
fill = "group", palette = c("lightseagreen", "indianred1"))+
stat_compare_means(aes(group = group),
method = "wilcox.test",
label = "p.signif",
symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "ns")))+
theme(text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
ggboxplot(NSUN6_LUSC_expr, x = "group", y = "NSUN6",
fill = "group", palette = c("lightseagreen", "indianred1"))+
stat_compare_means(aes(group = group),
method = "wilcox.test",
label = "p.signif",
symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "ns")))+
theme(text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
ggboxplot(NSUN6_LUSC_expr, x = "group", y = "NSUN6",
fill = "group", palette = c("indianred1", "lightseagreen"))+
stat_compare_means(aes(group = group),
method = "wilcox.test",
label = "p.signif",
symnum.args=list(cutpoints = c(0, 0.001, 0.01, 0.05, 1),
symbols = c("***", "**", "*", "ns")))+
theme(text = element_text(size=10),
axis.text.x = element_text(angle=45, hjust=1))
?enrichplot
??enrichplot
？ggplot
?ggplot
ggplot(data=go_enrich_df, aes(x=type_order,y=GeneNumber, fill=type)) +
geom_bar(stat="identity", width=0.8) +
scale_fill_manual(values = COLS) +
theme_bw() +
xlab("GO term") +
ylab("Num of Genes") +
labs(title = "The Most Enriched GO Terms")+
theme(axis.text.x=element_text(face = "bold", color="gray50",angle = 70,vjust = 1, hjust = 1 ))#angle是坐标轴字体倾斜的角度，可以自己设置
OSA.group <- read.csv("D:/R/公司/阻塞性睡眠呼吸障碍/1.原始数据/OSA group.csv")
View(OSA.group)
？GSEAB
？GSEA
?GSEA
??GSEA()
####验证模型####
library(rms)
library(pROC)
# 读取数据
data <- read.csv("alzheimer_combined_imputed.csv", row.names = 1)
features_lasso <- varCoef$Feature
features_rf <- gg_dta$names[gg_dta$col != "-"]
data_lg <- data[, c("Group", features_lg)]
data_lasso <- data[, c("Group", features_lasso)]
setwd("D:/R/项目/王敏/实验")
####验证模型####
library(rms)
library(pROC)
# 读取数据
data <- read.csv("alzheimer_combined_imputed.csv", row.names = 1)
data$Group <- factor(data$Group, levels = c("aCCI-low", "aCCI-high"))
# 提取特征
varCoef <- read.csv("lasso_varcoff.csv", row.names = 1)
gg_dta <- read.csv("RF_importance.csv", row.names = 1)
features_lg <- c("age","Glucose","Phosphate")
features_lasso <- varCoef$Feature
features_rf <- gg_dta$names[gg_dta$col != "-"]
data_lg <- data[, c("Group", features_lg)]
data_lasso <- data[, c("Group", features_lasso)]
data_rf <- data[, c("Group", features_rf)]
set.seed(1234)
# 构建模型公式
model_formula_lg <- as.formula(paste("Group ~", paste(features_lg, collapse = " + ")))
model_formula_lg
model_formula_lasso <- as.formula(paste("Group ~", paste(features_lasso, collapse = " + ")))
model_formula_rf <- as.formula(paste("Group ~", paste(features_rf, collapse = " + ")))
# 配置 datadist
dd <- datadist(data)
options(datadist = "dd")
# 构建多因素逻辑回归模型
model_glm <- lrm(model_formula_lg, data = data_lg, x = TRUE, y = TRUE)
model_lasso <- lrm(model_formula_lasso, data = data_lasso, x = TRUE, y = TRUE)
model_rf <- lrm(model_formula_rf, data = data_rf, x = TRUE, y = TRUE)
#####ROC#####
# 预测概率
pred_glm <- predict(model_glm, newdata = data_lg, type = "fitted")
pred_lasso <- predict(model_lasso, newdata = data_lasso, type = "fitted")
pred_rf <- predict(model_rf, newdata = data_rf, type = "fitted")
# 计算 ROC 曲线
roc_glm <- roc(data_lg$Group, pred_glm)
roc_lasso <- roc(data_lasso$Group, pred_lasso)
roc_rf <- roc(data_rf$Group, pred_rf)
# 设置颜色
colors <- c("#1f77b4", "#FD8D62", "#66C3A5")
# 绘制 ROC 曲线
plot(roc_glm, col = colors[1], lwd = 2, main = "ROC Curves for Different Models")
lines(roc_lasso, col = colors[2], lwd = 2)
lines(roc_rf, col = colors[3], lwd = 2)
# 添加图例并显示 AUC 值
legend("bottomright", legend = c(paste0("GLM (AUC = ", round(auc(roc_glm), 3), ")"),
paste0("LASSO (AUC = ", round(auc(roc_lasso), 3), ")"),
paste0("RF (AUC = ", round(auc(roc_rf), 3), ")")),
col = colors, lty = 1, lwd = 2)
View(roc_glm)
dev.off()
#####校准曲线####
# 绘制校准曲线
cal_glm <- calibrate(model_glm, method = "boot", B = 1000)
cal_lasso <- calibrate(model_lasso, method = "boot", B = 1000)
cal_rf <- calibrate(model_rf, method = "boot", B = 1000)
plot(cal_glm, col = colors[1], lwd = 2, main = "Calibration Curves")
lines(cal_lasso, col = colors[2], lwd = 2)
lines(cal_rf, col = colors[3], lwd = 2)
legend("topleft", legend = c("GLM", "LASSO", "RF"),
col = colors, lty = 1, lwd = 2)
dev.off()
#####DCA曲线#####
library(rmda)
# 将预测概率添加到对应的数据框中
data_lg$pred_glm <- pred_glm
data_lasso$pred_lasso <- pred_lasso
data_rf$pred_rf <- pred_rf
# 将 Group 变量转换为数值类型（0 和 1）
data_lg$Group <- as.numeric(data_lg$Group) - 1  # 假设原始 Group 为因子 "CCI-low" 和 "CCI-high"
data_lasso$Group <- as.numeric(data_lasso$Group) - 1
data_rf$Group <- as.numeric(data_rf$Group) - 1
# 计算 DCA 曲线
dca_glm <- decision_curve(Group ~ pred_glm, data = data_lg, family = binomial, thresholds = seq(0, 1, by = 0.01))
dca_lasso <- decision_curve(Group ~ pred_lasso, data = data_lasso, family = binomial, thresholds = seq(0, 1, by = 0.01))
dca_rf <- decision_curve(Group ~ pred_rf, data = data_rf, family = binomial, thresholds = seq(0, 1, by = 0.01))
# 绘制 DCA 曲线
plot_decision_curve(list(dca_glm, dca_lasso, dca_rf), curve.names = c("GLM", "LASSO", "RF"),
col = colors, lty = 1, lwd = 2,
main = "Decision Curve Analysis")
dev.off()
plot(cal_glm, col = colors[1], lwd = 2, main = "Calibration Curves")
lines(cal_lasso, col = colors[2], lwd = 2)
lines(cal_rf, col = colors[3], lwd = 2)
# 设置颜色
colors <- c("#1f77b4", "#FD8D62", "#66C3A5")
dev.off()
# 绘制 ROC 曲线
plot(roc_glm, col = "#1f77b4", lwd = 2, main = "ROC Curves for Different Models")
plot(cal_glm, col = "#1f77b4", lwd = 2, main = "Calibration Curves")
lines(cal_lasso, col = colors[2], lwd = 2)
lines(cal_rf, col = colors[3], lwd = 2)
plot(cal_lasso, col = colors[2], lwd = 2, main = "Calibration Curves")
lines(cal_glm, col = colors[1], lwd = 2)
lines(cal_rf, col = colors[3], lwd = 2)
legend("topleft", legend = c("GLM", "LASSO", "RF"),
col = colors, lty = 1, lwd = 2)
####验证模型####
library(rms)
library(pROC)
# 读取数据
data <- read.csv("alzheimer_combined_imputed.csv", row.names = 1)
data$Group <- factor(data$Group, levels = c("aCCI-low", "aCCI-high"))
# 提取特征
varCoef <- read.csv("lasso_varcoff.csv", row.names = 1)
gg_dta <- read.csv("RF_importance.csv", row.names = 1)
features_lg <- c("age","Glucose","Phosphate")
features_lasso <- varCoef$Feature
features_rf <- gg_dta$names[gg_dta$col != "-"]
data_lg <- data[, c("Group", features_lg)]
data_lasso <- data[, c("Group", features_lasso)]
data_rf <- data[, c("Group", features_rf)]
set.seed(1234)
# 构建模型公式
model_formula_lg <- as.formula(paste("Group ~", paste(features_lg, collapse = " + ")))
model_formula_lg
model_formula_lasso <- as.formula(paste("Group ~", paste(features_lasso, collapse = " + ")))
model_formula_rf <- as.formula(paste("Group ~", paste(features_rf, collapse = " + ")))
# 配置 datadist
dd <- datadist(data)
options(datadist = "dd")
# 构建多因素逻辑回归模型
model_glm <- lrm(model_formula_lg, data = data_lg, x = TRUE, y = TRUE)
model_lasso <- lrm(model_formula_lasso, data = data_lasso, x = TRUE, y = TRUE)
model_rf <- lrm(model_formula_rf, data = data_rf, x = TRUE, y = TRUE)
#####ROC#####
# 预测概率
pred_glm <- predict(model_glm, newdata = data_lg, type = "fitted")
pred_lasso <- predict(model_lasso, newdata = data_lasso, type = "fitted")
pred_rf <- predict(model_rf, newdata = data_rf, type = "fitted")
# 计算 ROC 曲线
roc_glm <- roc(data_lg$Group, pred_glm)
roc_lasso <- roc(data_lasso$Group, pred_lasso)
roc_rf <- roc(data_rf$Group, pred_rf)
# 设置颜色
colors <- c("#1f77b4", "#FD8D62", "#66C3A5")
# 绘制 ROC 曲线
plot(roc_glm, col = colors[1], lwd = 2, main = "ROC Curves for Different Models")
lines(roc_lasso, col = colors[2], lwd = 2)
lines(roc_rf, col = colors[3], lwd = 2)
# 添加图例并显示 AUC 值
legend("bottomright", legend = c(paste0("GLM (AUC = ", round(auc(roc_glm), 3), ")"),
paste0("LASSO (AUC = ", round(auc(roc_lasso), 3), ")"),
paste0("RF (AUC = ", round(auc(roc_rf), 3), ")")),
col = colors, lty = 1, lwd = 2)
dev.off()
#####校准曲线####
# 绘制校准曲线
cal_glm <- calibrate(model_glm, method = "boot", B = 1000)
cal_lasso <- calibrate(model_lasso, method = "boot", B = 1000)
cal_rf <- calibrate(model_rf, method = "boot", B = 1000)
plot(cal_glm, col = colors[1], lwd = 2, main = "Calibration Curves")
lines(cal_lasso, col = colors[2], lwd = 2)
lines(cal_rf, col = colors[3], lwd = 2)
legend("topleft", legend = c("GLM", "LASSO", "RF"),
col = colors, lty = 1, lwd = 2)
dev.off()
#####DCA曲线#####
library(rmda)
# 将预测概率添加到对应的数据框中
data_lg$pred_glm <- pred_glm
data_lasso$pred_lasso <- pred_lasso
data_rf$pred_rf <- pred_rf
# 将 Group 变量转换为数值类型（0 和 1）
data_lg$Group <- as.numeric(data_lg$Group) - 1  # 假设原始 Group 为因子 "CCI-low" 和 "CCI-high"
data_lasso$Group <- as.numeric(data_lasso$Group) - 1
data_rf$Group <- as.numeric(data_rf$Group) - 1
# 计算 DCA 曲线
dca_glm <- decision_curve(Group ~ pred_glm, data = data_lg, family = binomial, thresholds = seq(0, 1, by = 0.01))
dca_lasso <- decision_curve(Group ~ pred_lasso, data = data_lasso, family = binomial, thresholds = seq(0, 1, by = 0.01))
dca_rf <- decision_curve(Group ~ pred_rf, data = data_rf, family = binomial, thresholds = seq(0, 1, by = 0.01))
# 绘制 DCA 曲线
plot_decision_curve(list(dca_glm, dca_lasso, dca_rf), curve.names = c("GLM", "LASSO", "RF"),
col = colors, lty = 1, lwd = 2,
main = "Decision Curve Analysis")
dev.off()
####列线图模型####
final_model <- model_lasso
# 获取模型的系数
coefficients <- coef(final_model)
print(coefficients)
# 提取变量名称和系数
variables <- names(coefficients)
formula_string <- paste(coefficients, "*", variables, collapse = " + ")
# 构建最终的公式字符串
final_formula <- paste("log_odds_of_mortality =", formula_string)
print(final_formula)
# 构建最终的公式字符串
final_formula <- paste("Probability of High aCCI =", formula_string)
print(final_formula)
setwd("D:/R/项目/AD/实验")
library(mice)
library(nortest)
library(VIM)
library(tidyverse)
####处理缺失值####
# 加载数据
ndata <- read.csv("alzheimer_combined.csv", row.names = 1)
View(ndata)
